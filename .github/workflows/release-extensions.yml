name: Build & Release Extensions

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version without v (e.g., 1.0.0)"
        required: true
        default: "0.1.0"

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq zip rsync

      - name: Derive version
        id: v
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG="v${VERSION}"
          else
            RAW="${GITHUB_REF##*/}"
            TAG="${RAW}"
            VERSION="${RAW#v}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Version: $VERSION  Tag: $TAG"

      - name: Create tag (manual runs)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.v.outputs.tag }}
          git push origin ${{ steps.v.outputs.tag }}

      - name: Prepare build dirs
        run: |
          mkdir -p build/chromium build/firefox
          rsync -a --delete --exclude '.git' --exclude '.github' ./ build/chromium/
          rsync -a --delete --exclude '.git' --exclude '.github' ./ build/firefox/

      # ---------- Chromium ----------
      - name: Validate manifest (Chromium)
        run: jq . build/chromium/manifest.json >/dev/null

      - name: Set version & strip Firefox-only fields (Chromium)
        run: |
          tmp=build/chromium/manifest.json.tmp
          jq '.version = "${{ steps.v.outputs.version }}"' build/chromium/manifest.json > "$tmp"
          mv "$tmp" build/chromium/manifest.json
          jq 'del(.browser_specific_settings)' build/chromium/manifest.json > "$tmp" || cp build/chromium/manifest.json "$tmp"
          mv "$tmp" build/chromium/manifest.json

      - name: Zip Chromium
        run: |
          (cd build/chromium && zip -r ../bandwidth-hero-chromium.zip .)
          ls -lh build

      # ---------- Firefox ----------
      - name: Validate manifest (Firefox)
        run: jq . build/firefox/manifest.json >/dev/null

      - name: Set version & ensure gecko fields (Firefox)
        run: |
          tmp=build/firefox/manifest.json.tmp
          jq '
            .version = "${{ steps.v.outputs.version }}" |
            .browser_specific_settings //= { "gecko": { "id": "bandwidth-hero@example.com", "strict_min_version": "128.0" } }
          ' build/firefox/manifest.json > "$tmp"
          mv "$tmp" build/firefox/manifest.json

      - name: Zip Firefox
        run: |
          (cd build/firefox && zip -r ../bandwidth-hero-firefox.zip .)
          ls -lh build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extension-zips
          path: |
            build/bandwidth-hero-chromium.zip
            build/bandwidth-hero-firefox.zip

      - name: Create GitHub Release with assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.v.outputs.tag }}
          name: Bandwidth Hero ${{ steps.v.outputs.version }}
          draft: false
          prerelease: false
          files: |
            build/bandwidth-hero-chromium.zip
            build/bandwidth-hero-firefox.zip